"use strict";
/**
 * webOS TV Luna Service URI Ï†ïÍ∑úÌôî Ïú†Ìã∏Î¶¨Ìã∞
 *
 * Ïù¥ ÌÅ¥ÎûòÏä§Îäî Îã§ÏñëÌïú ÌòïÌÉúÏùò Luna Service URIÎ•º ÌëúÏ§Ä ÌòïÌÉúÎ°ú Ï†ïÍ∑úÌôîÌïòÍ≥†,
 * Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Î≥ÑÏπ≠(alias) ÏßÄÏõêÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.URINormalizer = void 0;
class URINormalizer {
    /**
     * Ï∫êÏãú Ï¥àÍ∏∞Ìôî
     */
    static initializeCache() {
        if (this.initialized)
            return;
        this.SERVICE_URI_MAPPINGS.forEach(mapping => {
            // ÌëúÏ§Ä URI Îß§Ìïë
            this.uriToStandardCache.set(mapping.standardUri, mapping.standardUri);
            this.serviceNameToUriCache.set(mapping.serviceName, mapping.standardUri);
            // Î≥ÑÏπ≠ Îß§Ìïë
            mapping.aliases.forEach(alias => {
                this.uriToStandardCache.set(alias, mapping.standardUri);
            });
            // ÏÑúÎπÑÏä§Î™Ö Î≥ÄÌòï Îß§Ìïë (ÏÜåÎ¨∏Ïûê, Í≥µÎ∞± Ï†úÍ±∞ Îì±)
            const normalizedServiceName = mapping.serviceName.toLowerCase().replace(/\s+/g, '');
            this.serviceNameToUriCache.set(normalizedServiceName, mapping.standardUri);
        });
        this.initialized = true;
    }
    /**
     * URIÎ•º ÌëúÏ§Ä ÌòïÌÉúÎ°ú Ï†ïÍ∑úÌôî
     * @param uri Ï†ïÍ∑úÌôîÌï† URI
     * @returns ÌëúÏ§ÄÌôîÎêú URI ÎòêÎäî null (Îß§ÌïëÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞)
     */
    static normalizeURI(uri) {
        this.initializeCache();
        if (!uri || !uri.startsWith('luna://')) {
            return null;
        }
        // Í≥µÎ∞± Ï†úÍ±∞ Î∞è ÏÜåÎ¨∏Ïûê Î≥ÄÌôò
        const cleanUri = uri.trim();
        // Ï∫êÏãúÏóêÏÑú Ï∞æÍ∏∞
        const standardUri = this.uriToStandardCache.get(cleanUri);
        if (standardUri) {
            console.log(`üîÑ URI normalized: ${uri} ‚Üí ${standardUri}`);
            return standardUri;
        }
        // Î∂ÄÎ∂Ñ Îß§Ïπ≠ ÏãúÎèÑ (Ïú†Ïó∞Ìïú Îß§Ïπ≠)
        for (const [cachedUri, standard] of this.uriToStandardCache.entries()) {
            if (cachedUri.includes(cleanUri) || cleanUri.includes(cachedUri)) {
                console.log(`üîÑ URI partially matched: ${uri} ‚Üí ${standard}`);
                return standard;
            }
        }
        console.log(`‚ùå URI normalization failed: ${uri}`);
        return null;
    }
    /**
     * ÏÑúÎπÑÏä§Î™ÖÏóêÏÑú ÌëúÏ§Ä URI Í∞ÄÏ†∏Ïò§Í∏∞
     * @param serviceName ÏÑúÎπÑÏä§Î™Ö
     * @returns ÌëúÏ§Ä URI ÎòêÎäî null
     */
    static getStandardURIFromServiceName(serviceName) {
        this.initializeCache();
        if (!serviceName)
            return null;
        console.log(`üîç Looking up service name: "${serviceName}"`);
        console.log(`üìã Available cache entries:`, Array.from(this.serviceNameToUriCache.entries()));
        // Ï†ïÌôïÌïú Îß§Ïπò ÏãúÎèÑ
        let standardUri = this.serviceNameToUriCache.get(serviceName);
        if (standardUri) {
            console.log(`‚úÖ Exact match found: ${serviceName} ‚Üí ${standardUri}`);
            return standardUri;
        }
        // Ï†ïÍ∑úÌôîÎêú ÏÑúÎπÑÏä§Î™ÖÏúºÎ°ú ÏãúÎèÑ
        const normalizedName = serviceName.toLowerCase().replace(/\s+/g, '');
        console.log(`üîÑ Trying normalized name: "${normalizedName}"`);
        standardUri = this.serviceNameToUriCache.get(normalizedName);
        if (standardUri) {
            console.log(`‚úÖ Normalized match found: ${normalizedName} ‚Üí ${standardUri}`);
            return standardUri;
        }
        // Î∂ÄÎ∂Ñ Îß§Ïπ≠ ÏãúÎèÑ
        for (const [cachedName, uri] of this.serviceNameToUriCache.entries()) {
            if (cachedName.includes(normalizedName) || normalizedName.includes(cachedName)) {
                console.log(`üéØ Service name partially matched: ${serviceName} ‚Üí ${uri}`);
                return uri;
            }
        }
        console.log(`‚ùå No URI found for service: ${serviceName}`);
        return null;
    }
    /**
     * URIÏóêÏÑú ÏÑúÎπÑÏä§Î™Ö Ï∂îÏ∂ú
     * @param uri Luna Service URI
     * @returns ÏÑúÎπÑÏä§Î™Ö ÎòêÎäî null
     */
    static getServiceNameFromURI(uri) {
        this.initializeCache();
        const standardUri = this.normalizeURI(uri);
        if (!standardUri)
            return null;
        // Îß§ÌïëÏóêÏÑú ÏÑúÎπÑÏä§Î™Ö Ï∞æÍ∏∞
        const mapping = this.SERVICE_URI_MAPPINGS.find(mapping => mapping.standardUri === standardUri);
        return mapping ? mapping.serviceName : null;
    }
    /**
     * ÏÑúÎπÑÏä§Ïùò Î™®Îì† URI Î≥ÄÌòï Í∞ÄÏ†∏Ïò§Í∏∞ (ÌëúÏ§Ä + Î≥ÑÏπ≠)
     * @param serviceName ÏÑúÎπÑÏä§Î™Ö
     * @returns URI Î∞∞Ïó¥
     */
    static getAllURIVariations(serviceName) {
        this.initializeCache();
        const mapping = this.SERVICE_URI_MAPPINGS.find(mapping => mapping.serviceName === serviceName);
        if (!mapping)
            return [];
        return [mapping.standardUri, ...mapping.aliases];
    }
    /**
     * Î™®Îì† ÌëúÏ§Ä URI Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
     * @returns ÌëúÏ§Ä URI Î∞∞Ïó¥
     */
    static getAllStandardURIs() {
        this.initializeCache();
        return this.SERVICE_URI_MAPPINGS.map(mapping => mapping.standardUri);
    }
    /**
     * Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ URI Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
     * @param category Ïπ¥ÌÖåÍ≥†Î¶¨ ('media', 'system', 'network', 'device', 'storage', 'security')
     * @returns Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò URI Î∞∞Ïó¥
     */
    static getURIsByCategory(category) {
        this.initializeCache();
        return this.SERVICE_URI_MAPPINGS
            .filter(mapping => mapping.category === category)
            .map(mapping => mapping.standardUri);
    }
    /**
     * URIÍ∞Ä Ïú†Ìö®ÌïúÏßÄ ÌôïÏù∏
     * @param uri ÌôïÏù∏Ìï† URI
     * @returns Ïú†Ìö® Ïó¨Î∂Ä
     */
    static isValidURI(uri) {
        return this.normalizeURI(uri) !== null;
    }
    /**
     * ÎîîÎ≤ÑÍπÖÏö© Îß§Ìïë Ï†ïÎ≥¥ Ï∂úÎ†•
     */
    static debugMappings() {
        this.initializeCache();
        console.log('üìä URI Normalization Mappings:');
        this.SERVICE_URI_MAPPINGS.forEach(mapping => {
            console.log(`  ${mapping.serviceName}:`);
            console.log(`    Standard: ${mapping.standardUri}`);
            console.log(`    Aliases: ${mapping.aliases.join(', ')}`);
            console.log(`    Category: ${mapping.category}`);
        });
        console.log(`Total cached mappings: ${this.uriToStandardCache.size}`);
    }
}
exports.URINormalizer = URINormalizer;
URINormalizer.SERVICE_URI_MAPPINGS = [
    {
        serviceName: 'Audio',
        standardUri: 'luna://com.webos.audio',
        aliases: ['luna://com.webos.service.audio'],
        category: 'media'
    },
    {
        serviceName: 'Activity Manager',
        standardUri: 'luna://com.palm.activitymanager',
        aliases: ['luna://com.webos.activitymanager'],
        category: 'system'
    },
    {
        serviceName: 'Application Manager',
        standardUri: 'luna://com.webos.applicationManager',
        aliases: ['luna://com.webos.service.applicationmanager'],
        category: 'system'
    },
    {
        serviceName: 'Connection Manager',
        standardUri: 'luna://com.webos.service.connectionmanager',
        aliases: ['luna://com.webos.connectionmanager'],
        category: 'network'
    },
    {
        serviceName: 'Settings Service',
        standardUri: 'luna://com.webos.service.settings',
        aliases: ['luna://com.webos.settings'],
        category: 'system'
    },
    {
        serviceName: 'System Service',
        standardUri: 'luna://com.webos.service.systemservice',
        aliases: ['luna://com.webos.systemservice'],
        category: 'system'
    },
    {
        serviceName: 'TV Device Information',
        standardUri: 'luna://com.webos.service.tv.systemproperty',
        aliases: ['luna://com.webos.tv.systemproperty', 'luna://com.webos.service.tv'],
        category: 'device'
    },
    {
        serviceName: 'Database',
        standardUri: 'luna://com.palm.db',
        aliases: ['luna://com.webos.service.db', 'luna://com.webos.db'],
        category: 'system'
    },
    {
        serviceName: 'DRM',
        standardUri: 'luna://com.webos.service.drm',
        aliases: ['luna://com.webos.drm'],
        category: 'media'
    },
    {
        serviceName: 'BLE GATT',
        standardUri: 'luna://com.webos.service.blegatt',
        aliases: ['luna://com.webos.service.ble', 'luna://com.webos.ble'],
        category: 'network'
    },
    {
        serviceName: 'Magic Remote',
        standardUri: 'luna://com.webos.service.mrcu',
        aliases: ['luna://com.webos.service.magicremote', 'luna://com.webos.magicremote'],
        category: 'device'
    },
    {
        serviceName: 'Media Database',
        standardUri: 'luna://com.webos.service.mediadb',
        aliases: ['luna://com.webos.mediadb'],
        category: 'media'
    },
    {
        serviceName: 'Keymanager3',
        standardUri: 'luna://com.webos.service.keymanager3',
        aliases: ['luna://com.webos.service.keymanager', 'luna://com.webos.keymanager'],
        category: 'security'
    },
    {
        serviceName: 'Device Unique ID',
        standardUri: 'luna://com.webos.service.sm',
        aliases: ['luna://com.webos.sm'],
        category: 'security'
    },
    {
        serviceName: 'Camera',
        standardUri: 'luna://com.webos.service.camera',
        aliases: ['luna://com.webos.camera'],
        category: 'device'
    }
];
// URI Îß§Ìïë Ï∫êÏãú (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
URINormalizer.uriToStandardCache = new Map();
URINormalizer.serviceNameToUriCache = new Map();
URINormalizer.initialized = false;
//# sourceMappingURL=uri-normalizer.js.map